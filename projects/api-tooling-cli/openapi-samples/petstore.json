{
  "openapi": "3.0.0",
  "info": {
    "title": "Sample Pet Store API",
    "description": "A sample API for demonstrating OpenAPI tooling",
    "version": "1.0.0",
    "contact": {
      "name": "API Support",
      "email": "support@petstore.com",
      "url": "https://petstore.com/support"
    }
  },
  "servers": [
    {
      "url": "https://api.petstore.com/v1",
      "description": "Production server"
    },
    {
      "url": "https://staging-api.petstore.com/v1",
      "description": "Staging server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/pets": {
      "get": {
        "operationId": "getPets",
        "summary": "List all pets",
        "description": "Retrieve a paginated list of pets in the store",
        "tags": ["pets"],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of pets to return",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of pets to skip",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Filter pets by owner user ID",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pets": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Pet"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                },
                "example": {
                  "pets": [
                    {
                      "id": "123e4567-e89b-12d3-a456-426614174000",
                      "name": "Buddy",
                      "species": "dog",
                      "breed": "Golden Retriever",
                      "age": 3,
                      "ownerId": "456e7890-e89b-12d3-a456-426614174001"
                    }
                  ],
                  "pagination": {
                    "limit": 20,
                    "offset": 0,
                    "total": 1
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createPet",
        "summary": "Create a new pet",
        "description": "Add a new pet to the store",
        "tags": ["pets"],
        "requestBody": {
          "description": "Pet object to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PetInput"
              },
              "example": {
                "name": "Max",
                "species": "cat",
                "breed": "Siamese",
                "age": 2,
                "ownerId": "456e7890-e89b-12d3-a456-426614174001"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Pet created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/pets/{petId}": {
      "get": {
        "operationId": "getPetById",
        "summary": "Get pet by ID",
        "description": "Retrieve a specific pet by its unique identifier",
        "tags": ["pets"],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "Unique identifier of the pet",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pet found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "404": {
            "description": "Pet not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updatePet",
        "summary": "Update pet",
        "description": "Update an existing pet's information",
        "tags": ["pets"],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "Unique identifier of the pet",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Updated pet information",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PetInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pet updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "404": {
            "description": "Pet not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deletePet",
        "summary": "Delete pet",
        "description": "Remove a pet from the store",
        "tags": ["pets"],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "Unique identifier of the pet",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Pet deleted successfully"
          },
          "404": {
            "description": "Pet not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "operationId": "getUsers",
        "summary": "List all users",
        "description": "Retrieve a list of all users",
        "tags": ["users"],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Filter users by email",
            "required": false,
            "schema": {
              "type": "string",
              "format": "email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createUser",
        "summary": "Create a new user",
        "description": "Register a new user in the system",
        "tags": ["users"],
        "requestBody": {
          "description": "User object to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "operationId": "getUserById",
        "summary": "Get user by ID",
        "description": "Retrieve a specific user by their unique identifier",
        "tags": ["users"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier of the user",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Bearer token authentication using JWT"
      }
    },
    "schemas": {
      "Pet": {
        "type": "object",
        "required": ["id", "name", "species"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the pet"
          },
          "name": {
            "type": "string",
            "description": "Pet's name",
            "example": "Buddy"
          },
          "species": {
            "type": "string",
            "enum": ["dog", "cat", "bird", "fish", "rabbit", "other"],
            "description": "Species of the pet"
          },
          "breed": {
            "type": "string",
            "description": "Breed of the pet",
            "example": "Golden Retriever"
          },
          "age": {
            "type": "integer",
            "minimum": 0,
            "maximum": 50,
            "description": "Age of the pet in years"
          },
          "ownerId": {
            "type": "string",
            "format": "uuid",
            "description": "User ID of the pet's owner"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the pet was added to the system"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the pet information was last updated"
          }
        }
      },
      "PetInput": {
        "type": "object",
        "required": ["name", "species", "ownerId"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Pet's name",
            "example": "Buddy"
          },
          "species": {
            "type": "string",
            "enum": ["dog", "cat", "bird", "fish", "rabbit", "other"],
            "description": "Species of the pet"
          },
          "breed": {
            "type": "string",
            "description": "Breed of the pet",
            "example": "Golden Retriever"
          },
          "age": {
            "type": "integer",
            "minimum": 0,
            "maximum": 50,
            "description": "Age of the pet in years"
          },
          "ownerId": {
            "type": "string",
            "format": "uuid",
            "description": "User ID of the pet's owner"
          }
        }
      },
      "User": {
        "type": "object",
        "required": ["id", "email", "name"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the user"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address",
            "example": "john@example.com"
          },
          "name": {
            "type": "string",
            "description": "User's full name",
            "example": "John Doe"
          },
          "phone": {
            "type": "string",
            "description": "User's phone number",
            "example": "+1-555-123-4567"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the user account was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the user information was last updated"
          }
        }
      },
      "UserInput": {
        "type": "object",
        "required": ["email", "name"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address",
            "example": "john@example.com"
          },
          "name": {
            "type": "string",
            "description": "User's full name",
            "example": "John Doe"
          },
          "phone": {
            "type": "string",
            "description": "User's phone number",
            "example": "+1-555-123-4567"
          },
          "address": {
            "$ref": "#/components/schemas/AddressInput"
          }
        }
      },
      "Address": {
        "type": "object",
        "required": ["street", "city", "country"],
        "properties": {
          "street": {
            "type": "string",
            "description": "Street address",
            "example": "123 Main St"
          },
          "city": {
            "type": "string",
            "description": "City name",
            "example": "New York"
          },
          "state": {
            "type": "string",
            "description": "State or province",
            "example": "NY"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal or ZIP code",
            "example": "10001"
          },
          "country": {
            "type": "string",
            "description": "Country name",
            "example": "United States"
          }
        }
      },
      "AddressInput": {
        "type": "object",
        "required": ["street", "city", "country"],
        "properties": {
          "street": {
            "type": "string",
            "description": "Street address",
            "example": "123 Main St"
          },
          "city": {
            "type": "string",
            "description": "City name",
            "example": "New York"
          },
          "state": {
            "type": "string",
            "description": "State or province",
            "example": "NY"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal or ZIP code",
            "example": "10001"
          },
          "country": {
            "type": "string",
            "description": "Country name",
            "example": "United States"
          }
        }
      },
      "Pagination": {
        "type": "object",
        "required": ["limit", "offset", "total"],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Number of items per page"
          },
          "offset": {
            "type": "integer",
            "description": "Number of items skipped"
          },
          "total": {
            "type": "integer",
            "description": "Total number of items available"
          }
        }
      },
      "Error": {
        "type": "object",
        "required": ["code", "message"],
        "properties": {
          "code": {
            "type": "string",
            "description": "Error code",
            "example": "INVALID_INPUT"
          },
          "message": {
            "type": "string",
            "description": "Human-readable error message",
            "example": "The provided input is invalid"
          },
          "details": {
            "type": "object",
            "description": "Additional error details",
            "additionalProperties": true
          }
        }
      }
    }
  }
}
